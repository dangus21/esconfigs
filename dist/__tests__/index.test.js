import{b as s,c as a,d as r,e as c,f as o,g as i}from"../chunk-DIH4S3C5.js";import{a as l}from"../chunk-VWFZ7S4G.js";import n from"child_process";import e from"fs";jest.mock("prompts");jest.mock("fs",()=>({existsSync:jest.fn(),readdirSync:jest.fn(),readFileSync:jest.fn(),writeFileSync:jest.fn()}));jest.mock("child_process",()=>({spawnSync:jest.fn().mockReturnValue({status:0,stdout:Buffer.from("mock stdout"),stderr:Buffer.from("")})}));jest.mock("process",()=>({cwd:jest.fn(()=>"/mock/cwd"),env:{}}));describe("Config Generator Utils",()=>{describe("detectCurrentPackageManager",()=>{it("should detect pnpm",()=>{e.existsSync.mockImplementation(t=>t.includes("pnpm-lock.yaml")),expect(s()).toBe("pnpm")}),it("should detect yarn",()=>{e.existsSync.mockImplementation(t=>t.includes("yarn.lock")),expect(s()).toBe("yarn")}),it("should detect npm",()=>{e.existsSync.mockImplementation(t=>t.includes("package-lock.json")),expect(s()).toBe("npm")}),it("should default to npm when no lock file is found",()=>{e.existsSync.mockReturnValue(!1),expect(s()).toBe("npm")})}),describe("detectPackageManager",()=>{it("should return the specified package manager",()=>{expect(a("yarn")).toBe("yarn")}),it('should detect current package manager when "current" is specified',()=>{e.existsSync.mockImplementation(t=>t.includes("yarn.lock")),expect(a("current")).toBe("yarn")}),it("should initialize npm if no package.json exists",()=>{e.existsSync.mockReturnValue(!1),e.readdirSync.mockReturnValue([]),a("npm"),expect(n.spawnSync).toHaveBeenCalledWith("npm",["init","-y"],expect.any(Object))}),it("should initialize npm if no package.json exists",()=>{e.existsSync.mockReturnValue(!1),e.readdirSync.mockReturnValue([]),a("npm"),expect(n.spawnSync).toHaveBeenCalledWith("npm",["init","-y"],expect.any(Object))})}),describe("buildPackageList",()=>{it("should build correct package list for ESLint and Prettier with NextJS and Tailwind",()=>{let t=r(["eslint","prettier"],!0,!0);expect(t).toContain("prettier"),expect(t).toContain("prettier-plugin-tailwindcss"),expect(t).toContain("@next/eslint-plugin-next"),expect(t).toContain("eslint@8.57.1")}),it("should build correct package list for Biome without NextJS and Tailwind",()=>{let t=r(["biomejs"],!1,!1);expect(t).toContain("@biomejs/biome@latest"),expect(t).not.toContain("prettier"),expect(t).not.toContain("@next/eslint-plugin-next")})}),describe("copyConfig",()=>{it("should write the correct ESLint config file",()=>{i("eslint"),expect(e.writeFileSync).toHaveBeenCalledWith(expect.stringContaining(".eslintrc.js"),expect.stringContaining("module.exports ="))}),it("should write the correct Prettier config file",()=>{i("prettier"),expect(e.writeFileSync).toHaveBeenCalledWith(expect.stringContaining(".prettierrc"),expect.stringContaining('"singleQuote": false'))}),it("should write the correct Biome config file",()=>{i("biomejs"),expect(e.writeFileSync).toHaveBeenCalledWith(expect.stringContaining("biome.json"),expect.stringContaining('"$schema":'))}),it("should write the correct EditorConfig file",()=>{i("editorConfig"),expect(e.writeFileSync).toHaveBeenCalledWith(expect.stringContaining(".editorConfig"),expect.stringContaining("root = true"))})}),describe("detectReactInPackageJson",()=>{it("should return true when React is in dependencies",()=>{e.existsSync.mockReturnValue(!0),e.readFileSync.mockReturnValue(JSON.stringify({dependencies:{react:"^17.0.2"}})),expect(o()).toBe(!0)}),it("should return true when React is in devDependencies",()=>{e.existsSync.mockReturnValue(!0),e.readFileSync.mockReturnValue(JSON.stringify({devDependencies:{"react-dom":"^17.0.2"}})),expect(o()).toBe(!0)}),it("should return false when React is not in package.json",()=>{e.existsSync.mockReturnValue(!0),e.readFileSync.mockReturnValue(JSON.stringify({dependencies:{lodash:"^4.17.21"}})),expect(o()).toBe(!1)}),it("should return false when package.json does not exist",()=>{e.existsSync.mockReturnValue(!1),expect(o()).toBe(!1)})}),describe("installDeps",()=>{it("should call spawnSync with the correct package manager and arguments",()=>{c({config:["eslint","prettier"],manager:"npm",withNextJS:!0,withTailwind:!0}),expect(n.spawnSync).toHaveBeenCalledWith("npm",["install",expect.stringContaining("eslint@8.57.1")],expect.any(Object))}),it('should use "add" for yarn',()=>{c({config:["eslint"],manager:"yarn",withNextJS:!1,withTailwind:!1}),expect(n.spawnSync).toHaveBeenCalledWith("yarn",["add",expect.stringContaining("eslint@8.57.1")],expect.any(Object))}),it("should not actually run any commands",()=>{c({config:["eslint"],manager:"npm",withNextJS:!1,withTailwind:!1}),expect(n.spawnSync).toHaveBeenCalled()})}),describe("No real operations",()=>{it("should not perform any real file system operations",()=>{i("eslint"),expect(e.writeFileSync).toHaveBeenCalled(),expect(e.writeFileSync).not.toBe(l("fs").writeFileSync)}),it("should not execute any real commands",()=>{c({config:["eslint"],manager:"npm",withNextJS:!1,withTailwind:!1}),expect(n.spawnSync).toHaveBeenCalled(),expect(n.spawnSync).not.toBe(l("child_process").spawnSync)}),it("should use mocked process.cwd()",()=>{expect(process.cwd()).toBe("/mock/cwd")})})});
//# sourceMappingURL=index.test.js.map