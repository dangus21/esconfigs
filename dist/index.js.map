{"version":3,"sources":["../src/index.ts"],"sourcesContent":["import { existsSync, readFileSync, readdirSync, writeFileSync } from \"node:fs\";\nimport { join, resolve } from \"node:path\";\n\nimport prompt from \"prompts\";\n\nimport * as configs from \"./configs\";\nimport { installDeps } from \"./installDeps\";\n\nfunction detectReactInPackageJson(): boolean {\n\tconst packageJsonPath = join(process.cwd(), \"package.json\");\n\n\tif (!existsSync(packageJsonPath)) {\n\t\tconsole.log(\"package.json not found in the current directory.\");\n\t\treturn false;\n\t}\n\n\ttry {\n\t\tconst packageData = JSON.parse(readFileSync(packageJsonPath, \"utf-8\"));\n\t\tconst dependencies = {\n\t\t\t...packageData.dependencies,\n\t\t\t...packageData.devDependencies\n\t\t};\n\n\t\treturn \"react\" in dependencies || \"react-dom\" in dependencies;\n\t} catch (error) {\n\t\tconsole.error(\"Error reading or parsing package.json:\", error);\n\t\treturn false;\n\t}\n}\n\nconst cwd = process.cwd();\nconst currDirFiles = readdirSync(cwd);\nconst withReact = detectReactInPackageJson();\nconst withTS = currDirFiles.some((file) => file.startsWith(\"tsconfig.\"));\nconst withNextJS = currDirFiles.some((file) => file.startsWith(\"next.\"));\nconst withTailwind = currDirFiles.some((file) => file.startsWith(\"tailwind.\"));\n\nexport type ConfigOption = \"eslint\" | \"prettier\" | \"editorConfig\" | \"biomejs\";\nexport type PackageManager = \"npm\" | \"yarn\" | \"pnpm\" | \"current\" | null;\n\nfunction prettyObject(obj: Record<string, unknown> | string) {\n\tif (typeof obj === \"string\") return obj;\n\treturn JSON.stringify(obj, null, 2);\n}\n\nfunction buildDestinationFileName(configName: ConfigOption): [string, string] {\n\tif (configName === \"eslint\") {\n\t\tif (withTS) {\n\t\t\tconfigs.eslint.extends.push(\n\t\t\t\t\"plugin:@typescript-eslint/recommended\"\n\t\t\t);\n\t\t\tconfigs.eslint[\"parser\"] = \"@typescript-eslint/parser\";\n\t\t\tconfigs.eslint.plugins.push(\"@typescript-eslint\");\n\t\t\tconfigs.eslint.rules[\"@typescript-eslint/no-unused-vars\"] = [\n\t\t\t\t2,\n\t\t\t\t{ ignoreRestSiblings: true }\n\t\t\t];\n\t\t\tconfigs.eslint.rules[\"@typescript-eslint/naming-convention\"] = [\n\t\t\t\t\"warn\",\n\t\t\t\t{\n\t\t\t\t\tselector: \"interface\",\n\t\t\t\t\tformat: [\"PascalCase\"],\n\t\t\t\t\tcustom: {\n\t\t\t\t\t\tregex: \"^I[A-Z]\",\n\t\t\t\t\t\tmatch: false\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t];\n\t\t\tconfigs.eslint.settings[\"import/resolver\"] = {\n\t\t\t\t// This loads <rootdir>/tsconfig.json to eslint\n\t\t\t\ttypescript: {}\n\t\t\t};\n\t\t}\n\t\tif (withReact) {\n\t\t\tconfigs.eslint.extends.push(\n\t\t\t\t\"plugin:react/recommended\",\n\t\t\t\t\"plugin:react-hooks/recommended\"\n\t\t\t);\n\t\t\tconfigs.eslint.rules[\"react-hooks/exhaustive-deps\"] = 2;\n\t\t\tconfigs.eslint.rules[\"react/react-in-jsx-scope\"] = 0;\n\t\t\tconfigs.eslint.settings[\"react\"] = { version: \"detect\" };\n\t\t}\n\t\tif (withNextJS) {\n\t\t\tconfigs.eslint.extends.push(\"plugin:@next/next/recommended\");\n\t\t}\n\t\treturn [\n\t\t\t\".eslintrc.js\",\n\t\t\t`module.exports = ${prettyObject(configs.eslint)}`\n\t\t];\n\t}\n\n\tif (configName === \"prettier\") {\n\t\tif (withTailwind) {\n\t\t\tconfigs.prettier[\"plugins\"] = [\"prettier-plugin-tailwindcss\"];\n\t\t}\n\t\treturn [\".prettierrc\", prettyObject(configs.prettier)];\n\t}\n\n\tif (configName === \"biomejs\") {\n\t\treturn [\"biome.json\", prettyObject(configs.biome)];\n\t}\n\n\tif (configName === \"editorConfig\") {\n\t\treturn [\".editorConfig\", configs.editorConfig];\n\t}\n}\n\nfunction copyConfig(configName: ConfigOption) {\n\tconst [fileName, ogFile] = buildDestinationFileName(configName);\n\n\twriteFileSync(resolve(process.cwd(), fileName), ogFile);\n}\n\n(async () => {\n\tconst { configType }: { configType: ConfigOption[] } = await prompt({\n\t\ttype: \"multiselect\",\n\t\tname: \"configType\",\n\t\tmessage: \"What configs do you want to copy over?\",\n\t\tchoices: [\n\t\t\t{ title: \"ESlint\", value: \"eslint\" },\n\t\t\t{ title: \"Prettier\", value: \"prettier\" },\n\t\t\t{ title: \"Editor Config\", value: \"editorConfig\" },\n\t\t\t{ title: \"BiomeJS\", value: \"biomejs\" }\n\t\t]\n\t});\n\n\tlet packageManagerOption: PackageManager;\n\tif (configType) {\n\t\tconst { packageManager }: { packageManager: PackageManager } =\n\t\t\tawait prompt({\n\t\t\t\tname: \"packageManager\",\n\t\t\t\tmessage: \"What package manager that you have do you prefer?\",\n\t\t\t\ttype: \"select\",\n\t\t\t\tchoices: [\n\t\t\t\t\t{\n\t\t\t\t\t\ttitle: \"Current\",\n\t\t\t\t\t\tvalue: \"current\"\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\ttitle: \"Npm\",\n\t\t\t\t\t\tvalue: \"npm\"\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\ttitle: \"Yarn\",\n\t\t\t\t\t\tvalue: \"yarn\"\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\ttitle: \"Pnpm\",\n\t\t\t\t\t\tvalue: \"pnpm\"\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\tvalidate: (option: { title: string; value: string }) =>\n\t\t\t\t\t!option ? \"Select an option\" : true\n\t\t\t});\n\t\tpackageManagerOption = packageManager;\n\t}\n\n\tif (configType && packageManagerOption) {\n\t\tif (configType.length >= 0 && packageManagerOption) {\n\t\t\tfor (const configName of configType) {\n\t\t\t\tcopyConfig(configName);\n\t\t\t}\n\n\t\t\tinstallDeps({\n\t\t\t\tmanager: packageManagerOption,\n\t\t\t\tconfig: configType,\n\t\t\t\twithNextJS,\n\t\t\t\twithTailwind\n\t\t\t});\n\t\t}\n\t}\n})();\n"],"mappings":"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","names":["existsSync","readFileSync","readdirSync","writeFileSync","join","resolve","prompt","detectReactInPackageJson","packageJsonPath","join","existsSync","packageData","readFileSync","dependencies","error","cwd","currDirFiles","readdirSync","withReact","withTS","file","withNextJS","withTailwind","prettyObject","obj","buildDestinationFileName","configName","eslint","prettier","biome","editorConfig","copyConfig","fileName","ogFile","writeFileSync","resolve","configType","prompt","packageManagerOption","packageManager","option","installDeps"]}